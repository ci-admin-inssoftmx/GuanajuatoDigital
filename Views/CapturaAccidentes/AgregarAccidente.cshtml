
@model GuanajuatoAdminUsuarios.Models.CapturaAccidentesModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
<script>
    function isGoogleMapsScriptLoaded() {
        const scripts = document.getElementsByTagName('script');
        for (let i = 0; i < scripts.length; i++) {
            if (scripts[i].src.includes('https://maps.googleapis.com/maps/api/js')) {
                return true;
            }
        }
        return false;
    }

    if (!isGoogleMapsScriptLoaded()) {
        const script = document.createElement('script');
        script.defer = true;
        script.src = `https://maps.googleapis.com/maps/api/js?key=@Configuration["AppSettings:GoogleMapsApiKey"]&loading=async&libraries=marker`;
        document.head.appendChild(script);
    }
</script>

<style>
    #map-canvas {
        height: 400px;
    }

    .map-control {
        position: absolute;
        top: 30px; /* Separa el botón 20 píxeles desde el borde superior */
        left: 10px; /* Mantiene el botón 10 píxeles desde el borde izquierdo */
        z-index: 5;
        background-color: white;
        border: 2px solid #ccc;
        padding: 10px 15px; /* Aumenta el relleno interno para hacer el botón más grande */
        border-radius: 8px; /* Aumenta el radio del borde para un botón más redondeado */
        cursor: pointer;
        font-size: 18px; /* Aumenta el tamaño de la fuente del texto del botón */
        text-align: center; /* Centra el texto dentro del botón */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Añade una sombra sutil al botón */
    }
</style>
@{
    @inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;
    var listaIdsPermitidosJson = @HttpContextAccessor.HttpContext.Session.GetString("IdsPermitidos").ToString();
    var autorizaciones = @HttpContextAccessor.HttpContext.Session.GetString("Autorizaciones").ToString();
    var EtiReq = "Folio Emergencia (obligatorio)";
}

<script>
    $(document).ready(function () {
        var access = @listaIdsPermitidosJson;
        if (access != undefined && access != '') {
            if (!access.toString().includes(localStorage.getItem("menuId"))) {
                Swal.fire({
                    icon: "error",
                    title: "¡EL usuario no tiene acceso a esta opción!"
                });
                setTimeout(() => {
                    window.location.href = "/Principal";
                }, 200);
            }
        } else {
            Swal.fire({
                icon: "error",
                title: "¡EL usuario no tiene acceso a esta opción!"
            });
            setTimeout(() => {
                window.location.href = "/Principal";
            }, 200);
        } setTimeout(() => {
            modalCargaGeolocalizacion();
        }, 500);
        FolioVisible();

    });


    function FolioVisible() {
        $.ajax({
            url: '/CapturaAccidentes/FolioEmePermitido',
            type: 'GET',
            data: {},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                var Jsonstring = JSON.stringify(data);
                var content = JSON.parse(Jsonstring);
                if (content.Requerido == 1) {
                    let labelFolio = document.getElementById("LabFolio");
                    labelFolio.innerText = '@EtiReq';
                }               
            }
        })
    }

    function valid5char(e) {

        var value = e.target.value
        var reg = /[0-2][0-9][\:][0-5][0-9]/g
        var can = reg.test(value)
        if (!can) {
            e.target.value = ""
        }
    }

    function validacionHora(event) {
        var horaIngresada = event.target.value;
        var key = event.key
        var keycode = event.keyCode
        var horalength = horaIngresada.length
        if ([8, 46, 37, 38, 39, 40, 9].indexOf(keycode) != -1) {
            return
        }
        event.preventDefault();


        if (horalength == 0) {
            if ("012".indexOf(key) != -1) {
                event.target.value = key
            }
        }
        if (horalength == 1) {
            var lastval = horaIngresada[0]
            if (":" == key && lastval != "0") {
                event.target.value = "0" + event.target.value + key
            }
            else if (lastval == "2") {
                if ("0123".indexOf(key) != -1) {
                    event.target.value = event.target.value + key
                }
            } else if ("0123456789".indexOf(key) != -1) {
                event.target.value = event.target.value + key
            }
        }
        if (horalength == 2) {
            if (key == ":") {
                event.target.value = event.target.value + key
            }
            else if ("012345".indexOf(key) != -1) {
                event.target.value = event.target.value + ":" + key
            }
        }
        if (horalength == 3) {
            if ("012345".indexOf(key) != -1) {
                event.target.value = event.target.value + key
            }
        }
        if (horalength == 4) {
            var lastval = horaIngresada[3]
            var hours = parseInt(horaIngresada[0] + horaIngresada[1])

            if (lastval == "0" && hours == 0) {
                if ("0123456789".indexOf(key) != -1) {
                    event.target.value = event.target.value + key
                    setTimeout(validarFecha, 2)
                }
            } else {
                if ("0123456789".indexOf(key) != -1) {
                    event.target.value = event.target.value + key
                    setTimeout(validarFecha, 2)
                }
            }

        }
       }

    function validarFecha() {
        // Obtener la fecha actual
        var fechaActual = new Date();
        var fechaParseo = new Date(parseInt(fechaActual.getFullYear()), parseInt(fechaActual.getMonth()), parseInt(fechaActual.getDate()));


        var fechaSeleccionadaString = $("#fechacaptura").val();
        var splitFechaSeleccion = fechaSeleccionadaString.split('/')
            var objetoFecha = !fechaSeleccionadaString ? fechaParseo : new Date(parseInt(splitFechaSeleccion[2]), parseInt(splitFechaSeleccion[1]) - 1, parseInt(splitFechaSeleccion[0]));
            
        // Comparar la fecha seleccionada con la fecha actual
        if (fechaParseo.getTime() === objetoFecha.getTime()) {
            // Si la fecha seleccionada es la fecha actual, verificar la hora ingresada
            console.log("SI Entra")
            var horaIngresada = $("#HoraStr").val();
            var horaActual = fechaActual.getHours() * 60 + fechaActual.getMinutes();
            var horaIngresadaSplit = horaIngresada.split(':');
            var horaIngresadaEnMinutos = parseInt(horaIngresadaSplit[0]) * 60 + parseInt(horaIngresadaSplit[1]);
            console.log("horaIngresada", horaIngresada)
            console.log("horaActual", horaActual)
            console.log("horaSplit", horaIngresadaSplit)

            console.log("horaIngresadaEnMinutos", horaIngresadaEnMinutos)

            if (horaIngresadaEnMinutos > horaActual) {

                $("#HoraStr").val('');
                event.preventDefault();
            }
        }
    }

    function testKeyDown(e) {
        var value = e.target.value
        var key = e.key
        var keyCode = e.keyCode
        var pattern = /^[0-3]([0-9](\/([0-1]([0-9](\/([1-2]([0-9]([0-9]([0-9])?)?)?)?)?)?)?)?)?$/
        var date = value + key
        var can = pattern.test(date)

        if ([8, 46, 37, 38, 39, 40, 9].indexOf(keyCode) != -1) {
            return
        }

        if (can) {
            if (date.length == 10) {
                var splDate = date.split('/')
                var newDate = new Date(parseInt(splDate[2]), parseInt(splDate[1]) - 1, parseInt(splDate[0]))
                var day = newDate.getDate() < 10 ? "0" + newDate.getDate() : newDate.getDate()
                var month = newDate.getMonth() < 9 ? "0" + (parseInt(newDate.getMonth()) + parseInt(1)) : (parseInt(newDate.getMonth()) + parseInt(1))
                var year = newDate.getFullYear()
                var newStringDate = `${day}/${month}/${year}`
                if (day == splDate[0] && month == splDate[1] && year == splDate[2]) {
                    var NowStr = $("#" + e.target.id).data("kendoDatePicker").dateView._current
                    console.log(NowStr)
                    var selectetDay = new Date(parseInt(year), parseInt(month) - 1, parseInt(day))

                    if (selectetDay > NowStr) {
                        $("#fechacaptura").val("")
                        e.preventDefault()
                    }
                }
                else {
                    $("#fechacaptura").val("")
                    e.preventDefault()
                }
            } else if (date.length > 10) e.preventDefault()
            return
        }
        e.preventDefault()
    }



    $(document).ready(function () {
		//$("#Kilometro").on("input", function () {
		//	var value = this.value;
		//	if (value !== "") {
		//		this.value = value.replace(/[^\d.]/g, "");
		//	}
		//});

		$("#Kilometro").on("paste", function (e) {
			e.preventDefault();
			var clipboardData = e.originalEvent.clipboardData.getData('text/plain');
			if (/^\d+$/.test(clipboardData)) {
				document.execCommand('insertText', false, clipboardData);
			}
		});
	});
</script>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .col-12 {
        padding: 0 15px;
    }

    .drop-area {
        border: 2px dashed #d3d3d3;
        border-radius: 10px;
        padding: 20px;
        margin: 20px auto;
        max-width: 600px;
        position: relative;
        cursor: pointer;
        overflow: hidden;
    }

        .drop-area p {
            margin: 0;
            font-size: 16px;
            color: #d3d3d3;
        }

    #croquisImage {
        max-width: 100%;
        max-height: 500px;
        display: block;
        margin: 20px auto 0;
    }

    .file-name {
        margin-top: 10px;
        font-size: 14px;
        color: #333;
    }

    .hidden {
        visibility: hidden;
    }
</style>
<div class="mainContainer bg-light">

    <section class="mx-md-3 mx-lg-4 mx-xl-5 bg-white boxShadow my-5 rounded">
        <div class="row align-items-center justify-content-between px-4 px-md-4 pt-3 pb-2">
            <div class="col-12 col-md-auto">
                <div class="row align-items-center justify-content-center justify-content-md-start">
                    <div class="col-auto">
                        <div class="border border-2 border-dark rounded-circle">
                            <h5 class="m-0 numberCard d-flex align-items-center justify-content-center">
                                <b>1</b>
                            </h5>
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="icon-accidentes h1 colorPrimary"></i>
                    </div>
                    <div class="col-auto my-3">
                        <h2 class="m-0 h3"><b>Accidente</b></h2>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-8 pe-0">
                <div class="bgSuccess py-1"></div>
            </div>
            <div class="col-4 ps-0">
                <div class="bg-light py-1"></div>
            </div>
        </div>
        <div class="col-12 col-md-auto mt-4 mb-2">
            <h5 class="px-4"><b>Captura de accidentes</b></h5>
            <h6 class="px-4 text-muted">Captura de accidente en <b class="colorPrimary">Registro de Infracciones y Accidentes de Guanajuato.</b></h6>
        </div>
        <form id="nuevoAccidente1Form" class="row px-4 align-items-end">
            <div class="col-12">
                <div class="row align-items-end">
                    <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                        <div class="controlForm my-3">
                            <label>Fecha <b>(obligatorio)</b>:</label>
                            <span>
                                @(Html.Kendo().DatePickerFor(t => t.Fecha).Max(DateTime.Now)
                                    .Label(l => l.Content("Fecha <b>(obligatorio)</b>:"))
                                    .HtmlAttributes(new
                                    {
                                        style = "width: 100%",
                                        title = "please enter date",
                                        id = "fechacaptura",
                                        onkeydown = "testKeyDown(event)"
                                    })
                                    .Events(e =>
                                    {
                                        e.Change("validarFecha");
                                    })
                                    )
                            </span>
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                        <div class="controlForm my-3" style="height: auto;">
                            <label>Hora <b>(formato 24 horas)</b>:</label>
                            <div class="input-group">
                                <input autocomplete="off" type="text" id="HoraStr" name="HoraStr" class="form-control" onblur="valid5char(event)" onkeydown="validacionHora(event)" style="height: 3.5em;" />
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                        <div class="controlForm my-3" style="height: auto;">
                            <label id="LabFolio">Folio Emergencia</label>                           
                            <div class="input-group">
                                <input autocomplete="off" type="text" id="FolioEmergencia" name="FolioEmergencia" class="form-control" style="height: 3.5em;" onkeypress="return event.charCode >= 48 && event.charCode <= 57"/>
                            </div>
                        </div>
                    </div>


                    @if (ViewBag.canBlock)
                    {
                        <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                            <div class="controlForm my-3" style="height: auto; width: 250px">
                                <label>Folio <b>(obligatorio):</b></label>
                                @(Html.Kendo().NumericTextBox().Min(1)
                                    .Decimals(0)
                                    .Format("#")
                                    .Step(1)
                                    .Spinners(false)
                                    .Name("foliobAccidente")
                                    .Placeholder("Ingresa folio")
                                    .HtmlAttributes(new { style = "width: 100%" })
                                    )
                            </div>
                        </div>

                        <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                            <div class="controlForm my-3" style="height: auto; width: 250px">
                                    <label>Oficial <b>(obligatorio):</b></label>
										@(Html.Kendo().DropDownList().NoDataTemplate("No se encontraron datos")
											.Name("idOficial2")
											.DataTextField("Text")
											.DataValueField("Value")
											.DataSource(source =>
											{
												source.Read(read =>
												{
													read.Action("OficialesDependencia_Drop", "Oficiales");
												});
											})											
											.Filter(FilterType.Contains)
											.HtmlAttributes(new { style = "width:100%;" })
											)
                            </div>
                        </div>

                    }


                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    <label>Municipio <b>(obligatorio):</b></label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdMunicipio)
                            .NoDataTemplate("No se encontraron datos")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .OptionLabel("Selecciona un Municipio")
                            .Filter(FilterType.Contains)

                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("Municipios_Por_Delegacion_DropActivos", "CapturaAccidentes");
                                });
                            })
                            .HtmlAttributes(new { data_required_msg = "El campo Municipio es obligatorio" })
                            .HtmlAttributes(new { style = "width:100%;" })
                            .Filter(FilterType.Contains)
                            .Events(e => e.Change("onMunicipioChange"))
                            )
                    </span>
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    <label>Carretera <b>(obligatorio):</b></label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdCarretera)
                            .NoDataTemplate("No se encontraron datos")
                            .Label(l => l.Content("Carretera <b>(obligatorio)</b>:"))
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .Filter(FilterType.Contains)

                            .OptionLabel("Selecciona una Carretera")
                            .Events(e => e.Change("carreteraDropDownChange"))
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("CarreterasPorDelegacion", "CapturaAccidentes");
                                });
                            })
                            .HtmlAttributes(new { style = "width:100%;" })
                            .Filter(FilterType.Contains)
                            )
                    </span>
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    <label>Tramo <b>(obligatorio):</b></label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdTramo).NoDataTemplate("No se encontraron datos")
                            .Label(l => l.Content("Tramo <b>(obligatorio)</b>:"))
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .OptionLabel("Selecciona un Tramo")
                            .Filter(FilterType.Contains)

                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("Tramos_DropActivos", "CapturaAccidentes");
                                });
                            })
                            .HtmlAttributes(new { style = "width:100%;" })
                            .Filter(FilterType.Contains)
                            )
                    </span>
                </div>
            </div>

            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    <label>Kilómetro <b>(obligatorio)</b>:</label>
                    <div class="input-group">
                        <input autocomplete="off" type="text" id="Kilometro" name="Kilometro" class="form-control"  onkeydown="ValidarKm(event)"  style="height: 3.5em;" />
                    </div>                    
                </div>
            </div>  
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2 d-none" >
                <div class="controlForm my-3">
                    <label>Turno:</label>
                    <span>
                        @(Html.Kendo().DropDownListFor(t => t.IdTurno)
                            .NoDataTemplate("No se encontraron datos")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .OptionLabel("Selecciona un Turno")
                            .Filter(FilterType.Contains)
                            .Enable(false)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetTurnosDropDownList", "CapturaAccidentes").Data("getMunicipioIdSelected");
                                });
                            })
                            .AutoBind(false) // Prevent automatic binding
                            .HtmlAttributes(new { style = "width:100%;", id = "idTurno" })
                            )
                    </span>
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBox()
                        .Name("lugarCalle")
                        .Label(l => l.Content("Calle:"))
                        .Placeholder("Ingresa calle")
                        .HtmlAttributes(new
                        {
                            style = "width: 100%",
                            type = "text",
                            title = "Ingrese una calle valida."
                        })
                        )
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBox()
                        .Name("lugarNumero")
                        .Label(l => l.Content("Número:"))
                        .Placeholder("Ingresa número")
                        .HtmlAttributes(new
                        {
                            style = "width: 100%",
                            type = "text",
                            title = "Ingrese un número valida."
                        })
                        )
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBox()
                        .Name("lugarColonia")
                        .Label(l => l.Content("Colonia:"))
                        .Placeholder("Ingresa colonia")
                        .HtmlAttributes(new
                        {
                            style = "width: 100%",
                            type = "text",
                            title = "Ingrese una colonia valida."
                        })
                        )
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2 d-none">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBoxFor(t => t.Direccion)
                        .Label(l => l.Content("Direccion:"))
                        .Placeholder("Ingresa Dirección")
                        .HtmlAttributes(new
                        {
                            style = "width: 100%",
                            type = "text",
                            title = "Ingrese una dirección valida."
                        })
                        )
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBoxFor(t => t.Latitud)
                        .Label(l => l.Content("Latitud:"))
                        .Placeholder("Ingresa Latitud")
                        .HtmlAttributes(new
                        {
                            style = "width: 100%",
                            type = "text",
                            pattern = @"^-?\d+(\.\d+)?$",
                            title = "Ingrese un número decimal, puede ser negativo.",
                            inputmode = "decimal", // Ayuda a los navegadores y dispositivos móviles a mostrar el teclado adecuado
                            oninput = "this.value=this.value.replace(/[^0-9.-]/g,'')" // Reemplaza caracteres no permitidos en tiempo real
                        })
                        )
                </div>
            </div>
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlForm my-3">
                    @(Html.Kendo().TextBoxFor(t => t.Longitud)
                        .Label(l => l.Content("Longitud:"))
                        .Placeholder("Ingresa Longitud")
                        .HtmlAttributes(new
                        {
                            style = "width: 100%",
                            type = "text",
                            pattern = @"^-?\d+(\.\d+)?$",
                            title = "Ingrese un número decimal, puede ser negativo.",
                            inputmode = "decimal", // Ayuda a los navegadores y dispositivos móviles a mostrar el teclado adecuado
                            oninput = "this.value=this.value.replace(/[^0-9.-]/g,'')" // Reemplaza caracteres no permitidos en tiempo real
                        })
                        )
                </div>
            </div>
            <div class="col-12 btnOutline btnOutlinePrimary col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlButton my-3">
                    <button class="btn-info px-3" id="btnGeolocalizacion" onclick="buscarDireccion(event)">
                        <h5 class="m-0"><b>Buscar</b></h5>
                    </button>
                </div>
            </div>
            <div class="col-12 btnOutline btnOutlinePrimary col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlButton my-3">
                    <button class="btn-info px-3" id="btnGeolocalizacion" onclick="getLocation(event)">
                        <h5 class="m-0"><b>Gelocate</b></h5>
                    </button>
                </div>
            </div>

            <div class="row">
                <div class="col-6">
                    <div class="controlForm ">
                        <label class="d-flex align-items-center">
                            <i class="icon-geolocalizacion h1 colorPrimary me-2"></i>
                            <span>Datos de geolocalización</span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12" id="modalBodyCargaGeolocalizacion">
                    <div class="row  ">
                        <div class="form-group col-md-4">
                            <div class="controlForm" hidden>
                                <label>Dirección: <span id="address"></span>       <br /></label>
                                <label>Municipio: <span id="municipioGL"></span>       <br /></label>
                                <label>Longitude: <span id="longitude"></span></label>
                                <label>Latitude: <span id="latitude"></span>       <br /></label>
                            </div>
                        </div>
                    </div>
                    <div id="map-canvas"></div>
                </div>
            </div>

            <div class="col-12">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-6">
                        <div class="controlForm my-3">
                            <label>Observaciones tramo:</label>
                              <span class="input-group">
                                <textarea autocomplete="off" type="text" name="observacionesTramo" class="form-control k-textarea" rows="3"></textarea>
                             </span>
</div>
                    </div>
                </div>
            </div>
            <div class="row align-items-end my-3">
                <div class="col-12">
                    @(await Html.PartialAsync("_MultimediaFileManager", new ViewDataDictionary(ViewData) { { "controlClass", "controlForm my-3" } }))
                </div>
            </div>
            <div class="row align-items-center justify-content-between px-4 px-md-4 pt-3 pb-2">
                <div class="col-12 col-md-auto">
                    <div class="row align-items-center justify-content-center justify-content-md-start">
                        <div class="col-auto">
                            <div class="border border-2 border-dark rounded-circle">
                                <h5 class="m-0 numberCard d-flex align-items-center justify-content-center">
                                    <b>2</b>
                                </h5>
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="icon-clasificacionAccidente h1 colorPrimary"></i>
                        </div>
                        <div class="col-auto my-3">
                            <h2 class="m-0 h3"><b>Croquis</b></h2>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-8 pe-0">
                    <div class="bgSuccess py-1"></div>
                </div>
                <div class="col-4 ps-0">
                    <div class="bg-light py-1"></div>
                </div>
            </div>
            <div class="mt-2 row align-items-center justify-content-md-end">
                <img style="max-width:130px" width="90%" src="~/img/compass-rose.png" />
            </div>
            <div class="col-12">
                <div class="row">
                    <div id="dropArea" class="drop-area">
                        <p>Arrastra y suelta el archivo aquí o haz clic para seleccionarlo.</p>
                        <input type="file" id="archivoCroquis" name="archivoCroquis" accept="image/*" style="display: none;">
                        <img id="croquisImage" src="" alt="">
                        <div id="fileName" class="file-name hidden">No se ha seleccionado ningún archivo</div>
                    </div>
                </div>
            </div>
            
                    </form>
        
        <div class="row px-4 align-items-center justify-content-center my-3">
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xx-2">
                <div class="controlButton my-3" onclick="guardarAccidente()">
                    @(Html.Kendo().Button()
                    .Name("AltaAccidente")
                        .HtmlAttributes(new { @class = "btnPrimary", id = "btnGuardar" })
                    .Content("<h5 class=\"m-0\"><b>Guardar</b></h5>"))
                </div>

            </div>       
        </div>

    </section>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('archivoCroquis');
        const croquisImage = document.getElementById('croquisImage');
        const fileNameDisplay = document.getElementById('fileName');

        // Abrir el selector de archivos cuando se hace clic en el área de arrastre
        dropArea.addEventListener('click', () => {
            fileInput.click();
        });

        // Manejar el archivo seleccionado
        fileInput.addEventListener('change', handleFile);

        // Manejar el archivo arrastrado y soltado
        dropArea.addEventListener('dragover', (event) => {
            event.preventDefault(); // Necesario para permitir el soltar
            dropArea.classList.add('dragover');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('dragover');
        });

        dropArea.addEventListener('drop', (event) => {
            event.preventDefault();
            dropArea.classList.remove('dragover');
            const file = event.dataTransfer.files[0];
            if (file) {
                fileInput.files = event.dataTransfer.files; // Actualiza fileInput con el archivo arrastrado
                handleFile({ target: { files: [file] } });
            }
        });

        function handleFile(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    croquisImage.src = e.target.result;
                };
                reader.readAsDataURL(file);
                fileNameDisplay.textContent = file.name; // Muestra el nombre del archivo
            } else {
                fileNameDisplay.textContent = 'No se ha seleccionado ningún archivo';
            }
        }
    });
    
    $(document).ready(function () {
        var access = @listaIdsPermitidosJson;
        if (access != undefined && access != '') {
            if (!access.toString().includes(localStorage.getItem("menuId"))) {
                Swal.fire({
                    icon: "error",
                    title: "¡EL usuario no tiene acceso a esta opción!"
                });
                setTimeout(() => {
                    window.location.href = "/Principal";
                }, 200);
            }
        } else {
            Swal.fire({
                icon: "error",
                title: "¡EL usuario no tiene acceso a esta opción!"
            });
            setTimeout(() => {
                window.location.href = "/Principal";
            }, 200);
        }                   
        
        $("#Kilometro").on("paste", function (e) {
            e.preventDefault();
            var clipboardData = e.originalEvent.clipboardData.getData('text/plain');
            if (/^\d+$/.test(clipboardData)) {
                document.execCommand('insertText', false, clipboardData);
            }
        });

        FolioVisible();        
    });

    function FolioVisible() {
        $.ajax({
            url: '/CapturaAccidentes/FolioEmePermitido',
            type: 'GET',
            data: {},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                var Jsonstring = JSON.stringify(data);
                var content = JSON.parse(Jsonstring);
                if (content.Requerido == 1) {
                    let labelFolio = document.getElementById("LabFolio");
                    labelFolio.innerText = '@EtiReq';
                }               
            }
        })
    }

    function testKeyDown(e) {
        var value = e.target.value
        var key = e.key
        var keyCode = e.keyCode
        var pattern = /^[0-3]([0-9](\/([0-1]([0-9](\/([1-2]([0-9]([0-9]([0-9])?)?)?)?)?)?)?)?)?$/
        var date = value + key
        var can = pattern.test(date)

        if ([8, 46, 37, 38, 39, 40, 9].indexOf(keyCode) != -1) {
            return
        }

        if (can) {
            if (date.length == 10) {
                var splDate = date.split('/')
                var newDate = new Date(parseInt(splDate[2]), parseInt(splDate[1]) - 1, parseInt(splDate[0]))
                var day = newDate.getDate() < 10 ? "0" + newDate.getDate() : newDate.getDate()
                var month = newDate.getMonth() < 9 ? "0" + (parseInt(newDate.getMonth()) + parseInt(1)) : (parseInt(newDate.getMonth()) + parseInt(1))
                var year = newDate.getFullYear()
                var newStringDate = `${day}/${month}/${year}`
                if (day == splDate[0] && month == splDate[1] && year == splDate[2]) {
                    var NowStr = $("#" + e.target.id).data("kendoDatePicker").dateView._current
                    console.log(NowStr)
                    var selectetDay = new Date(parseInt(year), parseInt(month) - 1, parseInt(day))

                    if (selectetDay > NowStr) {
                        $("#fechacaptura").val("")
                        e.preventDefault()
                    }
                }
                else {
                    $("#fechacaptura").val("")
                    e.preventDefault()
                }
            } else if (date.length > 10) e.preventDefault()
            return
        }
        e.preventDefault()
    }

    function onMunicipioChange(e) {
        var municipioId = this.value();
        var turnoDropDown = $("#idTurno").data("kendoDropDownList");

        if (municipioId) {
            turnoDropDown.dataSource.read({ municipioId: municipioId });
        } else {
            turnoDropDown.dataSource.data([]);
        }
    }

    function getMunicipioIdSelected() {
        return {
            municipioId: $("#IdMunicipio").data("kendoDropDownList").value()
        };
    }

    function carreteraDropDownChange() {
        var carreteraDDValue = $("#IdCarretera").data("kendoDropDownList").value();

        showLoading();
        $.ajax({
            url: "/CapturaAccidentes/Tramos_DropActivos",
            type: "POST",
            data: { carreteraDDValue: carreteraDDValue },
            success: function (data) {
                var TramosDropDown = $("#IdTramo").data("kendoDropDownList");
                TramosDropDown.dataSource.data(data);
                hideLoading();
            },
            error: function (xhr, status, error) {
                hideLoading();
            }
        });
    }

    function cambiaFecha() {
        var timepickerControl = $("#timepicker").data("kendoTimePicker");
        var fechaSeleccionada = new Date(this.value());
        var horaSeleccionada = timepickerControl.value();

        var fechaActual = new Date();

        if (fechaSeleccionada.getDate() == fechaActual.getDate() &&
            fechaSeleccionada.getMonth() == fechaActual.getMonth() &&
            fechaSeleccionada.getFullYear() == fechaActual.getFullYear()) {

            var horaActual = fechaActual.getHours() * 60 + fechaActual.getMinutes();

            if (horaSeleccionada != null && horaSeleccionada.getHours() * 60 + horaSeleccionada.getMinutes() > horaActual) {
                console.log("La hora seleccionada es posterior a la hora actual. Limpiando selección.");
                timepickerControl.value("");
            }
        }

        // Establecer la hora máxima como la hora actual
        timepickerControl.max(fechaActual);
    }

</script>

<script>

    function getLocation(e) {

        e.preventDefault()

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
           console.log( "Geolocation is not supported by this browser.");
        }
    }


    function showPosition(position) {
        var ltt = position.coords.latitude  
        var lgd= position.coords.longitude
        var longltt = parseFloat(ltt)
        var longlgd = parseFloat(lgd)
        if(!isNaN(ltt) && !isNaN(lgd)){
            searchLocation(1, longltt, longlgd, "");
            placeMarkerLanLng(longltt, longlgd)
        }

    }


  var map = null;
    var geocoder = null;
    var currentMarker = null;  // Variable global para el marcador

    function modalCargaGeolocalizacion() {
        showLoading();
        document.getElementById('municipioGL').innerHTML = 'Guanajuato';
        initMap();
        hideLoading();
    }

    function initMap() {
        var mapOptions = {
            center: { lat: 0, lng: 0 },
            zoom: 1,
            mapId: "DEMO_MAP_ID"
        };
        map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
        geocoder = new google.maps.Geocoder();

        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng);
        });

        var direccionCompleta = '';
        if (document.getElementById('latitude').innerHTML.trim() === '' && document.getElementById('longitude').innerHTML.trim() === '')
            direccionCompleta = 'Guanajuato';
        if (document.getElementById('address').innerHTML.trim() !== '' || document.getElementById('municipioGL').innerHTML.trim() !== '') {
            if (document.getElementById('municipioGL').innerHTML.trim() === 'Guanajuato')
                direccionCompleta = document.getElementById('address').innerHTML + ' Guanajuato';
            else
                direccionCompleta = document.getElementById('address').innerHTML + ' ' + document.getElementById('municipioGL').innerHTML + ' Guanajuato';
        }

        var locationButton = document.createElement("div");
        locationButton.classList.add("map-control");
        locationButton.textContent = "Mi Ubicación";
        locationButton.style.position = "absolute";
        locationButton.style.left = "190px";
        locationButton.style.top = "10px";
        locationButton.onclick = showLocation;

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(locationButton);

        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng);
        });

        searchLocation(0,
            document.getElementById('latitude').innerHTML,
            document.getElementById('longitude').innerHTML,
            direccionCompleta
        );
    }

     function buscarDireccion(event) {
        if (event) {
            event.preventDefault(); // Evitar el envío del formulario
        }

        var mun = $("#IdMunicipio").val()
		var calle = $("#lugarCalle").val()
		var numero = $("#lugarNumero").val()
		var colonia = $("#lugarColonia").val()
        var textMun = $("#IdMunicipio").data("kendoDropDownList").dataSource.data().filter(s => s.Value == mun)[0]?.Text ?? ""
        var ltt = $("#Latitud").val()
        var lgd = $("#Longitud").val()

        if(ltt && lgd){

            var longltt = parseFloat(ltt)
            var longlgd = parseFloat(lgd)
            if(!isNaN(ltt) && !isNaN(lgd)){
                searchLocation(1,longltt,longlgd,direccionCompleta);
                placeMarkerLanLng(longltt,longlgd)

            }
        
        return
        }


		var aux = `${calle} ${numero},${colonia},${textMun},Guanajuato`

		aux = aux.replace(",,",",")
		if(aux.indexOf(",") == 0){
		aux=aux.substring(1) 
		}
		if(aux.indexOf(" ,") == 0){
		aux=aux.substring(2) 
		}
		$("#Direccion").data("kendoTextBox").value(aux)



        var direccionCompleta = '';
       // document.getElementById('address').innerHTML = $("#Direccion").data("kendoTextBox").value();
        document.getElementById('address').innerHTML = aux;
        if (document.getElementById('latitude').innerHTML.trim() === '' && document.getElementById('longitude').innerHTML.trim() === '')
            direccionCompleta = 'Guanajuato';
        if (document.getElementById('address').innerHTML.trim() !== '' || document.getElementById('municipioGL').innerHTML.trim() !== '') {
            if (document.getElementById('municipioGL').innerHTML.trim() === 'Guanajuato')
                direccionCompleta = document.getElementById('address').innerHTML + ' Guanajuato';
            else
                direccionCompleta = document.getElementById('address').innerHTML + ' ' + document.getElementById('municipioGL').innerHTML + ' Guanajuato';
        }
        searchLocation(1,
            '',
            '',
            direccionCompleta
        );
     }

    function showLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(callback, errorCallback);
        } else {
            sitteg_warning("Geolocalización no es soportada por este navegador.");
        }
    }

    function callback(position) {
        var lat = position.coords.latitude;
        var lon = position.coords.longitude;

        document.getElementById('latitude').innerHTML = lat;
        document.getElementById('longitude').innerHTML = lon;

        var latLng = new google.maps.LatLng(lat, lon);

        if (currentMarker) {
            currentMarker.position = latLng;
        } else {
            currentMarker = new google.maps.marker.AdvancedMarkerElement({
                position: latLng,
                map: map,
                title: 'Mi ubicación'
            });
        }

        map.setZoom(12);
        map.setCenter(latLng);
    }

    function searchLocation(ope, lat, lon, address) {
        var latNum = parseFloat(lat);
        var lonNum = parseFloat(lon);
        var latLng;

        if (!isNaN(latNum) && !isNaN(lonNum)) {
            latLng = new google.maps.LatLng(latNum, lonNum);
            if (currentMarker) {
                currentMarker.position = latLng;
            } else {
                currentMarker = new google.maps.marker.AdvancedMarkerElement({
                    position: latLng,
                    map: map,
                    title: 'Ubicación especificada'
                });
            }
            map.setZoom(12);
            map.setCenter(latLng);
            return
        }

        if (address) {
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {
                    var result = results[0];
                    map.setZoom(12);
                    map.setCenter(result.geometry.location);
                    if (currentMarker) {
                        currentMarker.position = result.geometry.location;
                    } else {
                        currentMarker = new google.maps.marker.AdvancedMarkerElement({
                            position: result.geometry.location,
                            map: map,
                            title: address
                        });
                    }
                    document.getElementById('latitude').innerHTML = result.geometry.location.lat();
                    document.getElementById('longitude').innerHTML = result.geometry.location.lng();
                    if (ope == 1) {
                        $("#Latitud").data("kendoTextBox").value(document.getElementById('latitude').innerHTML);
                        $("#Longitud").data("kendoTextBox").value(document.getElementById('longitude').innerHTML);
                    }

                } else {
                    sitteg_warning('No se pudo encontrar la dirección: ' + status);
                }
            });
        }
    }

    function placeMarkerLanLng(ltt,lgd){
        var location = new google.maps.LatLng(ltt, lgd)
        placeMarker(location)
    }


    function placeMarker(location) {
        if (currentMarker) {
            currentMarker.position = location;
        } else {
            currentMarker = new google.maps.marker.AdvancedMarkerElement({
                position: location,
                map: map,
                title: 'Marcador personalizado'
            });
        }
        var lat = location.lat();
        var lng = location.lng();
        document.getElementById('latitude').innerHTML = lat;
        document.getElementById('longitude').innerHTML = lng;
        $("#Latitud").data("kendoTextBox").value(document.getElementById('latitude').innerHTML);
        $("#Longitud").data("kendoTextBox").value(document.getElementById('longitude').innerHTML);
        
        geocoder.geocode({ 'location': location }, function (results, status) {
            if (status === 'OK' && results[0]) {
                console.log(results[0])
                $("#lugarCalle").data("kendoTextBox").value(results[0].address_components[1].long_name)
                $("#lugarNumero").data("kendoTextBox").value(results[0].address_components[0].long_name)
                $("#lugarColonia").data("kendoTextBox").value(results[0].address_components[2].long_name)

                document.getElementById('address').innerHTML = results[0].formatted_address;
                $("#Direccion").data("kendoTextBox").value(document.getElementById('address').innerHTML);
            } else {
                document.getElementById('address').innerHTML = 'Dirección no encontrada';
            }
        });
    }

    function errorCallback(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                sitteg_warning("El usuario negó la solicitud de geolocalización.");
                break;
            case error.POSITION_UNAVAILABLE:
                sitteg_warning("La información de ubicación no está disponible.");
                break;
            case error.TIMEOUT:
                sitteg_warning("La solicitud de geolocalización ha expirado.");
                break;
            case error.UNKNOWN_ERROR:
                sitteg_warning("Un error desconocido ocurrió.");
                break;
        }
    }

    //window.onload = initMap;



    // invoke backend for crud actions
    function guardarAccidente() {

        // Crear un objeto FormData
        var formData = new FormData();

        // Serializar datos del formulario sin los archivos
        var formSerialized = $("#nuevoAccidente1Form").serializeArray();
        formSerialized.forEach(function (item) {
            formData.append(item.name, item.value);
        });

        // Agregar el archivo si está presente
        var archivoCroquis = $("#archivoCroquis")[0].files[0];
        if (archivoCroquis) {
            formData.append("archivoCroquis", archivoCroquis);
        }

        var controlsValidate = [];
        var isValid = true;

        controlsValidate.push({ 'controlName': 'fechacaptura' });
        controlsValidate.push({ 'controlName': 'HoraStr' });
        controlsValidate.push({ 'controlName': 'Kilometro' });

        // INPUTS
        if (!isControlsValid(controlsValidate)) { isValid = false; }

        // DROP DOWN LIST
        controlsValidate = [];
        controlsValidate.push({ 'controlName': 'IdMunicipio' });
        controlsValidate.push({ 'controlName': 'IdCarretera' });
        controlsValidate.push({ 'controlName': 'IdTramo' });


        if (!isControlsValidDropDown(controlsValidate)) { isValid = false; }

        if (!isValid) {
            sitteg_warning('Hacen falta datos o existen datos incorrectos, favor de verificar.');
            return;
        }

        let labelFolio = document.getElementById("LabFolio");
        if (labelFolio.innerText == '@EtiReq') {
            var ValFolio = $("#FolioEmergencia").val();
            if (ValFolio == 0) {

                sitteg_warning("Favor de ingresar el Folio Emergencias");
                return;
            }
        }
        console.log(formData);
        showLoading();
        $.ajax({
            url: '/CapturaAccidentes/GuardarUbicacionAccidente',
            type: 'POST',
            data: formData,
            contentType: false, // Necesario para enviar FormData
            processData: false, // Necesario para enviar FormData
            success: function (result) {
                if (result.success) {
                    sitteg_success("Se ha creado un registro de accidente, continue capturando la información solicitada");                    
                    
                    const accidenteId = result.id;
                    uploadFilesIfFailContinue(accidenteId, function () { window.location.href = '/CapturaAccidentes/CapturaAaccidente?showE=false&lstId=' + accidenteId; });

                } else {
                    // Muestra los mensajes de error en el frontend
                    console.log(result.errors);                    
                    console.log('httpError cad', result.httpError);
                    sitteg_warning("Ocurrieron los siguientes errores:\n" + result.message);
                    hideLoading();
                }
            }, error: function () {
                sitteg_warning("Ocurrio un error al procesar su solicitud.");
                hideLoading();
            }
        });
    }

    function uploadFilesIfFailContinue(accidenteId, completedCallback) {
        try {
            uploadFiles(accidenteId, completedCallback);
        }
        catch (error) {
            console.log(error);
            sitteg_warning("Ocurrio un error al cargar las imágenes y videos de evidencias.");
            completedCallback();
        }
    }

    function uploadFiles(accidenteId, completedCallback) {
        const thumbnailsInfo = thumbnailFileManager.getThumbnails();
        if (thumbnailsInfo.length === 0) {
			completedCallback();
			return;
		}

        const formData = new FormData();
        for (let i = 0; i < thumbnailsInfo.length; i++) {
            if (thumbnailsInfo[i].file instanceof File) {
                formData.append('files', thumbnailsInfo[i].file);
            } else if (thumbnailsInfo[i].file.rawFile instanceof File) {
                formData.append('files', thumbnailsInfo[i].file.rawFile);
            } else {
                console.error('Invalid file object:', thumbnailsInfo[i].file);
            }
        }

        formData.append('accidenteId', accidenteId);
        
        showLoading();
        $.ajax({
            url: '/CapturaAccidentes/UploadFiles',
            type: 'POST',
            processData: false,
            contentType: false,
            data: formData,
            error: function () {
                sitteg_warning("Ocurrio un error al cargar las imágenes y videos de evidencias.");
            },
            complete: function () {
				hideLoading();
                completedCallback();
			}
        });        
    }
</script>

<script>
    // TODO estas function se usan en muchas partes del code y no se reutilizan
    function valid5char(e) {
        var value = e.target.value
        var reg = /[0-2][0-9][\:][0-5][0-9]/g
        var can = reg.test(value)
        if (!can) {
            e.target.value = ""
        }
    }

    function validacionHora(event) {
        var horaIngresada = event.target.value;
        var key = event.key
        var keycode = event.keyCode
        var horalength = horaIngresada.length
        if ([8, 46, 37, 38, 39, 40, 9].indexOf(keycode) != -1) {
            return
        }
        event.preventDefault();


        if (horalength == 0) {
            if ("012".indexOf(key) != -1) {
                event.target.value = key
            }
        }
        if (horalength == 1) {
            var lastval = horaIngresada[0]
            if (":" == key && lastval != "0") {
                event.target.value = "0" + event.target.value + key
            }
            else if (lastval == "2") {
                if ("0123".indexOf(key) != -1) {
                    event.target.value = event.target.value + key
                }
            } else if ("0123456789".indexOf(key) != -1) {
                event.target.value = event.target.value + key
            }
        }
        if (horalength == 2) {
            if (key == ":") {
                event.target.value = event.target.value + key
            }
            else if ("012345".indexOf(key) != -1) {
                event.target.value = event.target.value + ":" + key
            }
        }
        if (horalength == 3) {
            if ("012345".indexOf(key) != -1) {
                event.target.value = event.target.value + key
            }
        }
        if (horalength == 4) {
            var lastval = horaIngresada[3]
            var hours = parseInt(horaIngresada[0] + horaIngresada[1])

            if (lastval == "0" && hours == 0) {
                if ("0123456789".indexOf(key) != -1) {
                    event.target.value = event.target.value + key
                    setTimeout(validarFecha, 2)
                }
            } else {
                if ("0123456789".indexOf(key) != -1) {
                    event.target.value = event.target.value + key
                    setTimeout(validarFecha, 2)
                }
            }

        }
    }

    function validarFecha() {
        // Obtener la fecha actual
        var fechaActual = new Date();
        var fechaParseo = new Date(parseInt(fechaActual.getFullYear()), parseInt(fechaActual.getMonth()), parseInt(fechaActual.getDate()));


        var fechaSeleccionadaString = $("#fechacaptura").val();
        var splitFechaSeleccion = fechaSeleccionadaString.split('/')
        var objetoFecha = !fechaSeleccionadaString ? fechaParseo : new Date(parseInt(splitFechaSeleccion[2]), parseInt(splitFechaSeleccion[1]) - 1, parseInt(splitFechaSeleccion[0]));

        // Comparar la fecha seleccionada con la fecha actual
        if (fechaParseo.getTime() === objetoFecha.getTime()) {
            // Si la fecha seleccionada es la fecha actual, verificar la hora ingresada
            console.log("SI Entra")
            var horaIngresada = $("#HoraStr").val();
            var horaActual = fechaActual.getHours() * 60 + fechaActual.getMinutes();
            var horaIngresadaSplit = horaIngresada.split(':');
            var horaIngresadaEnMinutos = parseInt(horaIngresadaSplit[0]) * 60 + parseInt(horaIngresadaSplit[1]);
            console.log("horaIngresada", horaIngresada)
            console.log("horaActual", horaActual)
            console.log("horaSplit", horaIngresadaSplit)

            console.log("horaIngresadaEnMinutos", horaIngresadaEnMinutos)

            if (horaIngresadaEnMinutos > horaActual) {

                $("#HoraStr").val('');
                event.preventDefault();
            }
        }
    }

</script>
